using Microsoft.PowerBI.Api.V2;
using Microsoft.PowerBI.Api.V2.Models;
using Microsoft.Rest;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Text;
using System.Threading.Tasks;
using System.Configuration;

namespace MigrationSample.Core
{
    static class SaaSController
    {
        private static string GraphUrlWithVersion
        {
            get
            {
                return $"{ConfigurationManager.AppSettings["graph-apiEndpointUri"]}/{ConfigurationManager.AppSettings["graph-apiEndpointUri-version"]}";
            }
        }

        public static ODataResponseListGroup GetGroups()
        {
            using (var client = CreatePowerBIClient())
            {
                return client.Groups.GetGroups();
            }
        }

        public static async Task<ODataResponseListImport> GetImports(string groupId)
        {
            using (var client = CreatePowerBIClient())
            {
                return await client.Imports.GetImportsInGroupAsync(groupId);
            }
        }

        private static PowerBIClient CreatePowerBIClient()
        {
            var credentials = new TokenCredentials(AzureTokenManager.GetPowerBISaaSToken());
            return new PowerBIClient(new Uri($"{ConfigurationManager.AppSettings["powerbi-service-apiEndpointUri"]}"), credentials);
        }

        public static async Task<ODataResponseListReport> GetReports(string groupId)
        {
            using (var client = CreatePowerBIClient())
            {
                return await client.Reports.GetReportsInGroupAsync(groupId);
            }
        }

        public static async Task<string> SendImport(string pbixPath, string groupId, string targetName, string nameConflict)
        {
            using (var client = CreatePowerBIClient())
            {
                using (var file = File.Open(pbixPath, FileMode.Open))
                {
                    return (await client.Imports.PostImportWithFileAsyncInGroup(groupId, file, targetName, nameConflict)).Id;
                }
            }
        }

        /// <summary>
        /// This is Preview Code.
        /// Create Power BI Group using, graph API. 
        /// This code will be changed shortly when the new PowerBI REST API for group creation is implemented
        /// </summary>
        /// <param name="groupName"></param>
        /// <returns></returns>
        public static async Task<O365Group> CreateGroup(string groupName)
        {
            var newGroup = new O365Group
            {
                DisplayName = groupName,
                Description = "Autogenerated by Migration Sample",
                MailNickname = groupName,
                MailEnabled = true,
                Visibility = "Private",
                SecurityEnabled = false,
                GroupTypes = new List<string> { "Unified" }
            };

            System.Net.WebRequest request = System.Net.WebRequest.Create(
               String.Format("{0}/groups",
               GraphUrlWithVersion)) as System.Net.HttpWebRequest;

            request.Method = "POST";
            request.Headers.Add("Authorization", String.Format("Bearer {0}", AzureTokenManager.GetGraphToken()));
            request.ContentType = "application/json";
            byte[] postBytes = Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(newGroup));
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(postBytes, 0, postBytes.Length);
            requestStream.Close();

            O365Group createdGroup = new O365Group();

            using (var response = await request.GetResponseAsync() as System.Net.HttpWebResponse)
            {
                //Get reader from response stream
                using (var reader = new StreamReader(response.GetResponseStream()))
                {
                    //Deserialize JSON string
                    createdGroup = JsonConvert.DeserializeObject<O365Group>(reader.ReadToEnd());
                }
            }

            if (!await AddToGroup(createdGroup.Id, AzureTokenManager.GetGraphToken(), AzureTokenManager.GetGraphUserUniqueId()))
            {
                await DeleteGroup(createdGroup.Id);
                return null;
            }

            return createdGroup;
        }

        /// <summary>
        /// This is Preview Code.
        /// Delete Power BI Group using, graph API. 
        /// This code will be changed shortly when the new PowerBI REST API for group creation is implemented
        /// </summary>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public static async Task DeleteGroup(string groupId)
        {
            System.Net.WebRequest request = System.Net.WebRequest.Create(
               String.Format("{0}/groups/{1}",
               GraphUrlWithVersion,
               groupId)) as System.Net.HttpWebRequest;

            request.Method = "DELETE";
            request.Headers.Add("Authorization", String.Format("Bearer {0}", AzureTokenManager.GetGraphToken()));

            using (var response = await request.GetResponseAsync() as System.Net.HttpWebResponse)
            {
                if (response.StatusCode != HttpStatusCode.NoContent)
                {
                    throw new Exception($"Failed to delete group: {groupId}");
                }
            }
        }

        /// <summary>
        /// This is Preview Code.
        /// Add Member to PowerBI group using graph API.
        /// This code will be changed shortly when the new PowerBI REST API for group creation is implemented
        /// </summary>
        /// <param name="groupId"></param>
        /// <param name="token"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        private static async Task<Boolean> AddToGroup(string groupId, string token, string userId)
        {
            var json = $"{{\"@odata.id\": \"{GraphUrlWithVersion}/directoryObjects/{userId}\"}}";

            System.Net.WebRequest request = System.Net.WebRequest.Create(
               string.Format("{0}/groups/{1}/members/$ref",
               GraphUrlWithVersion,
               groupId)) as System.Net.HttpWebRequest;

            request.Method = "POST";
            request.Headers.Add("Authorization", String.Format("Bearer {0}", token));
            request.ContentType = "application/json";
            byte[] postBytes = Encoding.UTF8.GetBytes(json);
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(postBytes, 0, postBytes.Length);
            requestStream.Close();

            //Get Reports response from request.GetResponse()
            using (var response = await request.GetResponseAsync() as System.Net.HttpWebResponse)
            {
                return response.StatusCode == HttpStatusCode.NoContent;
            }
        }
    }
}
